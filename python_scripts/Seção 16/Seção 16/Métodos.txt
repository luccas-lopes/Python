"""
Métodos

Métodos (funções), representam os comportamentos do objeto ou seja as ações 
que este objeto pode realizar no seu sistema.

Em Python, dividimos os métodos em dois grupos: Métodos de instância e Métodos de Classe.

# Métodos de Instância

# O método dunder init __init__ é um método especial chamado de construtor e sua função é construir o objeto a partir da classe.
Obs: Todo elemento em Python que inicia e finaliza com duplo underline é chamado de Dunder (Double underline)
Obs: Os métodos/funções dunder em Python são chamados de métodos mágicos.

ATENÇÃO! Por mais que possamos criar nossa próprias funções utilizando dunder underline no início e no fim, não é aconselhado.
Python possui vários métodos com esta forma de nomenclatura e pode ser que mudemos o comportamento
dessas funções mágicas internas da linguagem. Então evite o máximo, de preferência, nunca o faça.


p1 = Produto("PS4", "Console", 2300)
print(p1.desconto(20))
print(Produto.desconto(p1, 40))  # self, desconto


user1 = Usuario("Luccas", "Lopes", "lopesluccassilva@gmail.com", "123456")
print(user1.nome_completo())
print(Usuario.nome_completo(user1))

print(f"Senha: {user1._Usuario__senha")  # Acesso de forma errada de um atributo de classe
# no terminal digitar: pip install passlib





nome = input("Nome:")
sobrenome = input("Sobrenome:")
email = input("Email:")
senha = input("Senha:")
confirma_senha = input("Confirma a senha:")

if senha == confirma_senha: 
    user == Usuario(nome, sobrenome, email, senha)
else:
    print("Senha não confere...")
    exit(1)
senha = input("Informe a senha para acesso:")

if user.checa_senha(senha):
    print("Acesso permitido")
else:
    print("Acesso negado")

print(f"Senha User Criptografada: {user._Usuario__senha}")  # Acesso errado

# Métodos de classe em Python, são conhecidos com o métodos estáticos em outras linguagens.

# Métodos de Classe
#Usuario.contador

user = Usuario("Luccas", "Lopes", "lopesluccassilva@gmail.com", "123456")

Usuario.conta_usuarios()  # Forma correta
user.conta_usuarios()  # Possivel, mas incorreta

# Métodos privados (iniciando nome com duplo underline)

user = Usuario("Luccas", "Lopes", "lopesluccassilva@gmail.com", "123456")
print(user._Usuario__gera_usuario())  # Acesso de forma ruim.
"""

class Lampada:
    
    def __init__(self, cor, voltagem, luminosidade):
        self.__cor = cor
        self.__voltagem = voltagem
        self.__luminosidade = luminosidade
        self.__ligada = False

class ContaCorrente:
 
    contador = 4999
    
    def __init__(self, limite, saldo):
        self.__numero = ContaCorrente.contador + 1
        self.limite = limite
        self.saldo = saldo
        ContaCorrente.contador = self.__numero

class Produto:
  
    contador = 0

    def __init__(self, nome, descricao, valor):
        self.__id = Produto.contador + 1
        self.__nome = nome
        self.__descricao = descricao
        self.__valor = valor
        Produto.contador = self.__id
   

    def desconto(self, porcentagem):
        """Retorna o valor do produto com o desconto"""
        return (self.__valor * (100-porcentagem)) / 100


from passlib.hash import pbkd2_sha256 as cryp


class Usuario:
    
    contador = 0

    @classmethod
    def conta_usuarios(cls):
        # print(f"Classe: {cls}")
        print(f"Temos {cls.contador} usuário(s) no sistema")
    
     @classmethod  # método de classe
     def ver(self):
        print("Teste")


    @staticmethod  # Método estático
    def definicao():'
        return "EAZ231"

    def __init__(self, nome, sobrenome, email, senha):
        self.__id = Usuario.contador + 1
        self.__nome = nome
        self.__sobrenome = sobrenome
        self.__email = email
        self.__senha = cryp.hash(senha, rounds=200000, salt_size=16)
        Usuario.contador = self.__id
        print(f"Usuário criado: {self.__gera_usuario()}")

    def nome_completo(self):
        return f"{self.__nome} {self.__sobrenome}" 
 
    def checa_senha(self, senha):
        if cryp.verify(senha, self.__senha):
            return True
        return False

    def __gera_usuario(self):
        return self.__email.split("@")[0]
  

# Métodos estáticos

print(Usuario.contador)
print(Usuario.definicao())

user = Usuario("Luccas", "Lopes", "lopesluccassilva@gmail.com", "123456")
print(user.contador)
print(user.definicao())