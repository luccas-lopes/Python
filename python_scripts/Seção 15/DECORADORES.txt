"""
Decoradores (Decorators)

- Decorators são funções;
- Decorators envolvem outras funções e aprimoram seus comportamentos.
- Decorators também sao exemplos de Higher Order Functions;
- Decorators tem uma sintaxe própria, usando "@" (Syntact Sugar / Açucar Sintático)
# Testando 1

# saudacao()
teste = seja_educado(saudacao)
teste()

# Decorators como funções (Sintaxe não recomendada)

def seja_educado(funcao):
    def sendo():
        print("Foi uma prazer conhecer voce!")
        funcao()
        print("Tenha um ótimo dia!")
    return sendo


def saudacao():
    print("Seja bem-vindo à aula Python")



# Decorators com Syntax Sugar


def seja_educado_mesmo(funcao):
    def sendo_mesmo():
        print("Foi um prazer conhecer você!")
        funcao()
        print("Tenha um excelente dia!")
    return sendo_mesmo

@seja_educado_mesmo
def apresentando():
    print("Meu nome é Luccas")

# Testando 

apresentando()


@seja_educado_mesmo
def dormir():
    print("Quero dormir...")


dormir()







http://www.suaempresa.com.br/home
http://www.suaempresa.com.br/servicos
http://www.suaempresa.com.br/produtos
http://www.suaempresa.com.br/admin

# Obs não é código funcional, é apenas exemplo:


def chega_login(request):
    if not request.usuario:
        redirect("http://www.suaempresa.com.br")


def home(request):
    return "Pode acessar home"


def servicos(request):
    return "Pode acessar servicos"


def produtos(request):
    return "Pode acessar produtos"


@checa_login
def admin(request):
    return "Pode acessar admin"


"""

"""
|--------------------------------------|
| Home|Serviços|Produtos|Administrativo|
----------------------------------------
"""

# Obs: Não confunda Decorator com Decorator Function.
