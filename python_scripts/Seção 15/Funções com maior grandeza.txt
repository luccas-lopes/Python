"""
Funções com maior grandeza - Higher Order Functions - HOF

- Quando uma linguagem de programação suporta HOF, indica que podemos ter funções
que retornam outras funções como resultado ou mesmo podemos passar funções
como argumentos para outras funções e até mesmo criar variáveis do tipo de funções
nos nossos programas.

Obs: Na seção de funções, nós utilizamos isso.
Em Python, as funções são cidadãos de primeira classe.


# Exemplo - Definindo as funções
def somar(a, b):
    return a + b


def subtrair(a, b):
    return a - b


def mult(a, b):
    return a * b


def div(a, b):
    return a / b


def calcular(num1, num2, funcao):
    return funcao(num1, num2)


# Testando as funções
print(calcular(4, 3, somar)
print(calcular(4, 3, subtrair)
print(calcular(4, 3, mult)
print(calcular(4, 3, div)



# Nested Functions - Funções aninhadas


# Em Python, podemmos também ter funções dentro de funções, que são conhecidas por Nested Functions
# ou também Inner Functions.

# Exemplo

from random import choice

def cumprimento(pessoa):
    def humor():
        return choice(("E ai", "Suma daqui", "Gosto muito de você"))
    return humor() + pessoa

# Testando 
print(cumprimento("Luccas"))
print(cumprimento("Leandro"))
print(cumprimento("Levi"))




# Retornando funções de outras funções

from random import choice

def faz_me_rir():
    def rir():
        return choice(("hahahahahaa", "kkkkkkkk", "yayayayayayaya"))
    return rir

# Testando

rindo = faz_me_rir()
print(rindo())

# Inner Functions (Funções internas) podem acessar o escopo de funções mais externas.

from random import choice


def faz_me_rir_novamente(pessoa):
    def dando_risada():
        risada = choice(("hahahaha", "lololololololol", "kkkkkkkkk"))
        return f"{risada} {pessoa}"
    return dando_risada

# Testano 

rindo = faz_me_rir_novamente("Luccas")
print(rindo())
"""

