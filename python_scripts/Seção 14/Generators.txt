"""
Geradores

- Geradores (Generators) são Iterators (Iteradores);
Obs: O contrário não é verdadeiro, NEM todo iterator é um generator.
Outras informações:
- Generators podem ser criados com funções geradoras;
- Funções geradoras utilizam a palavra reservada yield;
- Generators podem ser criados com Expressões Geradoras;

Diferenças entre Funções e Generator Functions (Funções Geradoras)

-------------------------------------------------------------------------------
| Funções                              | Generator Functions                  |
| Utilizam Return                      | Utilizam yield                       |
| Retorna uma vez                      | Podem utilizar yield múltiplas vezes |
| Quando executada, retorna um valor   | Retorna um generator.                |
-------------------------------------------------------------------------------

gen = conta_ate(5)
# print(type(gen))  # <class 'generator'>
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))

for num in gen:
    print(num)
"""

# Exemplo de função geradora (Generator Function)

def conta_ate(valor_maximo):
    contador = 1
    while contador <= valor_maximo:
        yield contador
        contador += 1

# OBS: Uma generator Function não é um generator. Ela gera um generator.
gen = conta_ate(10)
# gen = list(conta_ate(10))
print(next(gen))  # 1
print("Continua no for")
for num in gen:
    print(num)

